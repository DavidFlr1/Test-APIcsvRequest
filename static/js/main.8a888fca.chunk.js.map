{"version":3,"sources":["App.js","index.js"],"names":["App","useState","columns","setColumns","data","setData","duplicate","setDuplicate","handleFileUpload","e","a","file","target","files","reader","FileReader","onload","evt","bstr","result","handleInformation","readAsBinaryString","dataString","lines","split","headers","list","duplicateList","phoneList","i","length","row","obj","j","handleEmailValidation","element","Object","values","filter","x","includes","Telefono","push","map","c","name","selector","email","test","createTheme","text","primary","secondary","className","Container","classname","fluid","Row","Col","sm","Form","FormGroup","Input","type","accept","onChange","FormText","color","pagination","highlightOnHover","theme","ReactDOM","render","document","getElementById"],"mappings":"kSAiHeA,EA3GH,WAER,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAGMC,EAAgB,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sDACfC,EAAOF,EAAEG,OAAOC,MAAM,IACtBC,EAAS,IAAIC,YACZC,OAAS,SAACC,GACb,IAAMC,EAAOD,EAAIL,OAAOO,OACxBC,EAAkBF,IAEtBJ,EAAOO,mBAAmBV,GAPL,2CAAH,sDAWhBS,EAAoB,SAAAE,GAStB,IARA,IAAMC,EAAQD,EAAWE,MAAM,WACzBC,EAAUF,EAAM,GAAGC,MAAM,KACzBE,EAAO,GACPC,EAAgB,GAEhBC,EAAY,GAGTC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAAK,CACnC,IAAME,EAAMR,EAAMM,GAAGL,MAAM,KAC3B,GAAIC,GAAWM,EAAID,SAAWL,EAAQK,OAAQ,CAG1C,IAFA,IAAME,EAAM,GAEHC,EAAI,EAAGA,EAAIR,EAAQK,OAAQG,IAChC,GAAGC,EAAsBH,EAAI,IAAI,CAC7B,IAAII,EAAUJ,EAAIE,GACdR,EAAQQ,KACRD,EAAIP,EAAQQ,IAAME,GAM1BC,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,IACvCF,EAAUY,SAASR,EAAIS,UAIvBd,EAAce,KAAKV,IAHnBJ,EAAUc,KAAKV,EAAIS,UACnBf,EAAKgB,KAAKV,MAS1B,IAAM9B,EAAUuB,EAAQkB,KAAI,SAAAC,GAAC,MAAK,CAChCC,KAAMD,EACNE,SAAUF,MAIZzC,EAAWD,GACXG,EAAQqB,GAERnB,EAAaoB,IAIXO,EAAwB,SAAAa,GAAK,MAAI,4DAA4DC,KAAKD,IASxG,OAPAE,sBAAY,YAAa,CACrBC,KAAM,CACJC,QAAS,UACTC,UAAW,aAKb,qBAAKC,UAAU,MAAf,SACI,eAACC,EAAA,EAAD,CAAWC,UAAU,mBAAmBC,OAAO,EAA/C,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKN,UAAU,YAAvB,UACI,kEACA,cAACO,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,OAAO,OAAOC,SAAUzD,EAAkB6C,UAAU,gBACvE,cAACa,EAAA,EAAD,CAAUC,MAAM,QAAhB,+FAKhB,eAACV,EAAA,EAAD,CAAKJ,UAAU,mBAAf,UACI,eAACK,EAAA,EAAD,CAAKC,GAAI,EAAT,UACI,mDACA,cAAC,IAAD,CAAWS,YAAU,EAACC,kBAAgB,EAACnE,QAASA,EAASE,KAAMA,OAGnE,eAACsD,EAAA,EAAD,CAAKC,GAAI,EAAT,UACI,kDACA,cAAC,IAAD,CAAWW,MAAM,YAAYF,YAAU,EAACC,kBAAgB,EAACnE,QAASA,EAASE,KAAME,gB,MClGzGiE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8a888fca.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Container, Row, Col, Button, Form, FormGroup, Input, Label, FormText, Table } from 'reactstrap';\r\nimport DataTable, { createTheme } from 'react-data-table-component';\r\n\r\nimport './styles.css'\r\n\r\nconst App = () => {\r\n    // Set tables const\r\n    const [columns, setColumns] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [duplicate, setDuplicate] = useState([]);\r\n\r\n    // Handle .csv when upload\r\n    const handleFileUpload = async e => {\r\n        const file = e.target.files[0]      // Get file\r\n        const reader = new FileReader()\r\n        reader.onload = (evt) => {\r\n            const bstr = evt.target.result  // Parse data\r\n            handleInformation(bstr)         // Handle csv information\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }\r\n\r\n    // Handle .csv parsed information\r\n    const handleInformation = dataString => {\r\n        const lines = dataString.split(/\\r\\n|\\n/)   // Separate csv array by lines\r\n        const headers = lines[0].split(',')         // Get headers of csv file\r\n        const list = []                             // Instance of list to alocate csv information\r\n        const duplicateList = []\r\n\r\n        const phoneList = []\r\n\r\n        // Loop trough each line to split its values\r\n        for (let i = 1; i < lines.length; i++) {\r\n            const row = lines[i].split(',');\r\n            if (headers && row.length === headers.length) {  // Avoid in case any line has more or less elements than headers\r\n                const obj = {};                             // Instance object to alocate each line as json\r\n                // Loop trough each value in line\r\n                for (let j = 0; j < headers.length; j++) {\r\n                    if(handleEmailValidation(row[1])){      // Verify second row is a valid email, otherwise avoid\r\n                        let element = row[j];\r\n                        if (headers[j]) {\r\n                            obj[headers[j]] = element;      // Save each value into object\r\n                        }\r\n                    }\r\n                }\r\n     \r\n                // Verify object to avoid blank and duplicates\r\n                if (Object.values(obj).filter(x => x).length > 0) {\r\n                    if(!phoneList.includes(obj.Telefono)){  // If phone list dosn't includes this phone then\r\n                        phoneList.push(obj.Telefono)        // add to phone list and keep verifying\r\n                        list.push(obj)                      // save object into table list\r\n                    } else {                                // else, save into duplicate list\r\n                        duplicateList.push(obj)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n     \r\n        // Set headers\r\n        const columns = headers.map(c => ({\r\n          name: c,\r\n          selector: c,\r\n        }));\r\n     \r\n        \r\n        setColumns(columns)         // Set columns\r\n        setData(list)               // Set rows\r\n\r\n        setDuplicate(duplicateList) // Set duplicated\r\n    }\r\n \r\n    // Handle wrong email address        - email name      @ email domain      . email dot\r\n    const handleEmailValidation = email => /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i.test(email)\r\n\r\n    createTheme('solarized', {\r\n        text: {\r\n          primary: '#C70039',\r\n          secondary: '#581845',\r\n        },\r\n      });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container classname=\"themed-container\" fluid={true}>\r\n                <Row>\r\n                    <Col sm=\"12\" className=\"headerBar\">\r\n                        <h2>CSV FILE READER AND TABLE DEPLOY</h2>\r\n                        <Form>\r\n                            <FormGroup>\r\n                                <Input type=\"file\" accept=\".csv\" onChange={handleFileUpload} className=\"input-style\"/>\r\n                                <FormText color=\"light\">Upload a .csv file to deploy table (Must contain name, email and phone)</FormText>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"body table-style\">\r\n                    <Col sm={6}>\r\n                        <h4>Information Table</h4>\r\n                        <DataTable pagination highlightOnHover columns={columns} data={data}\r\n                        />\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <h4>Duplicates Table</h4>\r\n                        <DataTable theme=\"solarized\" pagination highlightOnHover columns={columns} data={duplicate}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}